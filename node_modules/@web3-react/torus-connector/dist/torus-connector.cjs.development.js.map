{"version":3,"file":"torus-connector.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.request({ method: 'eth_accounts' }).then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.torus = undefined\n    this.emitDeactivate()\n  }\n}\n"],"names":["TorusConnector","chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","activate","torus","login","then","accounts","account","provider","m","Torus","init","getProvider","getChainId","getAccount","ethereum","request","method","deactivate","close","cleanUp","undefined","emitDeactivate","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUaA,cAAb;AAAA;;AAQE;;;QAAcC,eAAAA;gCAASC;QAAAA,4CAAc;qCAAIC;QAAAA,wDAAqB;iCAAIC;QAAAA,8CAAe;AAC/E,0CAAM;AAAEC,MAAAA,iBAAiB,EAAE,CAACJ,OAAD;AAArB,KAAN;AAEA,UAAKA,OAAL,GAAeA,OAAf;AACA,UAAKC,WAAL,GAAmBA,WAAnB;AACA,UAAKC,kBAAL,GAA0BA,kBAA1B;AACA,UAAKC,YAAL,GAAoBA,YAApB;;AACD;;AAfH;;AAAA,SAiBeE,QAjBf;AAAA;mBAkBS;;;+BAMiB,OAAKC,KAAL,CAAWC,KAAX,CAAiB,OAAKJ,YAAtB,EAAoCK,IAApC,CAAyC,UAACC,QAAD;AAAA,iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,SAAzC,kBAAhBC;AAEN,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,OAAKL,KAAL,CAAWK,QAAvB;AAAiCD,YAAAA,OAAO,EAAPA;AAAjC,WAAP;;;;;YARI,CAAC,OAAKJ;iCACY,mEAAO,wBAAP,QAAiCE,IAAjC,CAAsC,UAAAI,CAAC;AAAA;;AAAA,iCAAIA,CAAJ,oBAAIA,CAAC,WAAL,yBAAkBA,CAAlB;AAAA,WAAvC,kBAAdC;AACN,mBAAKP,KAAL,GAAa,IAAIO,KAAJ,CAAU,OAAKX,kBAAf,CAAb;mCACM,OAAKI,KAAL,CAAWQ,IAAX,CAAgB,OAAKb,WAArB;;;;;;AAMT,KA3BH;AAAA;AAAA;AAAA;;AAAA,SA6Bec,WA7Bf;AAAA;mBA8BW;;AAAP,6BAAO,OAAKT,KAAL,CAAWK,QAAlB;AACD,KA/BH;AAAA;AAAA;AAAA;;AAAA,SAiCeK,UAjCf;AAAA;mBAkCW;;AAAP,6BAAO,OAAKhB,OAAZ;AACD,KAnCH;AAAA;AAAA;AAAA;;AAAA,SAqCeiB,UArCf;AAAA;mBAsCW;;AAAP,6BAAO,OAAKX,KAAL,CAAWY,QAAX,CAAoBC,OAApB,CAA4B;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAA5B,EAAwDZ,IAAxD,CAA6D,UAACC,QAAD;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,OAA7D,CAAP;AACD,KAvCH;AAAA;AAAA;AAAA;;AAAA,SAyCeY,UAzCf;;AAyC8B,GAzC9B;;AAAA,SA2CeC,KA3Cf;AAAA;oBA4CU;;6BAAA,QAAKhB,KAAL,CAAWiB,OAAX;AACN,gBAAKjB,KAAL,GAAakB,SAAb;;AACA,gBAAKC,cAAL;;AACD,KA/CH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAoCC,mCAApC;;;;"}