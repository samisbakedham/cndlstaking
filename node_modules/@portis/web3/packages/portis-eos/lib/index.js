"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var penpal_1 = require("penpal");
var secureOrigin_1 = require("./utils/secureOrigin");
var styles_1 = require("./styles");
var networks_1 = require("./networks");
var version = '1.0.0-beta.3';
var widgetUrl = 'https://widget-eos.portis.io';
var Portis = /** @class */ (function () {
    function Portis(dappId, network, options) {
        if (options === void 0) { options = {}; }
        this._widgetUrl = widgetUrl;
        secureOrigin_1.validateSecureOrigin();
        this._valiadateParams(dappId, network, options);
        this.config = {
            dappId: dappId,
            network: networks_1.networkAdapter(network),
            version: version,
            scope: options.scope,
            registerPageByDefault: options.registerPageByDefault,
        };
        this.widget = this._initWidget();
    }
    Portis.prototype.showPortis = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.showPortis(this.config)];
                }
            });
        });
    };
    Portis.prototype.getAccounts = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widgetCommunication;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetCommunication = (_a.sent()).communication;
                        return [2 /*return*/, widgetCommunication.getAccounts(this.config)];
                }
            });
        });
    };
    Portis.prototype.onLogin = function (callback) {
        this._onLoginCallback = callback;
    };
    Portis.prototype._valiadateParams = function (dappId, network, options) {
        if (!dappId) {
            throw new Error("[Portis] 'dappId' is required. Get your dappId here: https://dashboard.portis.io");
        }
        if (!network) {
            throw new Error("[Portis] 'network' is required. Read more about it here: https://docs.portis.io/#/configuration?id=network");
        }
        if (options.registerPageByDefault !== undefined && typeof options.registerPageByDefault !== 'boolean') {
            throw new Error("[Portis] invalid 'registerPageByDefault' parameter, must be a boolean. Read more about it here: https://docs.portis.io/#/configuration?id=registerPageByDefault");
        }
    };
    Portis.prototype._initWidget = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var onload = function () { return __awaiter(_this, void 0, void 0, function () {
                var style, container, widgetFrame, connection, communication;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            style = document.createElement('style');
                            style.innerHTML = styles_1.styles;
                            container = document.createElement('div');
                            container.className = 'por_portis-container';
                            widgetFrame = document.createElement('div');
                            widgetFrame.id = "portis-container-" + Date.now();
                            widgetFrame.className = 'por_portis-widget-frame';
                            container.appendChild(widgetFrame);
                            document.body.appendChild(container);
                            document.head.appendChild(style);
                            connection = penpal_1.default.connectToChild({
                                url: this._widgetUrl,
                                appendTo: document.getElementById(widgetFrame.id),
                                methods: {
                                    setHeight: this._setHeight.bind(this),
                                    getWindowSize: this._getWindowSize.bind(this),
                                    onLogin: this._onLogin.bind(this),
                                },
                            });
                            connection.iframe.style.position = 'absolute';
                            connection.iframe.style.height = '100%';
                            connection.iframe.style.width = '100%';
                            connection.iframe.style.border = '0 transparent';
                            return [4 /*yield*/, connection.promise];
                        case 1:
                            communication = _a.sent();
                            resolve({ communication: communication, iframe: connection.iframe, widgetFrame: widgetFrame });
                            return [2 /*return*/];
                    }
                });
            }); };
            if (['loaded', 'interactive', 'complete'].indexOf(document.readyState) > -1) {
                onload();
            }
            else {
                window.addEventListener('load', onload.bind(_this), false);
            }
        });
    };
    Portis.prototype._setHeight = function (height) {
        return __awaiter(this, void 0, void 0, function () {
            var widgetFrame;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widget];
                    case 1:
                        widgetFrame = (_a.sent()).widgetFrame;
                        widgetFrame.style.height = height + "px";
                        return [2 /*return*/];
                }
            });
        });
    };
    Portis.prototype._getWindowSize = function () {
        var body = document.getElementsByTagName('body')[0];
        var width = window.innerWidth || document.documentElement.clientWidth || body.clientWidth;
        var height = window.innerHeight || document.documentElement.clientHeight || body.clientHeight;
        return { width: width, height: height };
    };
    Portis.prototype._onLogin = function (walletAddress, email, reputation, accountName, accountPermission) {
        if (this._onLoginCallback) {
            this._onLoginCallback(walletAddress, email, reputation, accountName, accountPermission);
        }
    };
    return Portis;
}());
exports.default = Portis;
//# sourceMappingURL=index.js.map