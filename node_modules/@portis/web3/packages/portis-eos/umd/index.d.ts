// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   penpal
//   eosjs

import { AsyncMethodReturns } from 'penpal';
import { ApiInterfaces } from 'eosjs';

export default class Portis {
    config: ISDKConfig;
    widget: Promise<{
        communication: AsyncMethodReturns<IConnectionMethods>;
        iframe: HTMLIFrameElement;
        widgetFrame: HTMLDivElement;
    }>;
    constructor(dappId: string, network: string, options?: IOptions);
    showPortis(): Promise<void>;
    getAccounts(): Promise<{
        error: string;
        result: string[];
    }>;
    onLogin(callback: (walletAddress: string, email?: string, reputation?: string, accountName?: string, accountPermission?: string) => void): void;
}

export interface INetwork {
    nodeUrl: string;
    chainId?: string;
    nodeProtocol?: 'rpc' | 'pocket';
    gasRelayHubAddress?: string;
}
export interface IConnectionMethods {
    getAccounts: (config: ISDKConfig) => Promise<{
        error: string;
        result: string[];
    }>;
    signTransaction: (txParams: ApiInterfaces.SignatureProviderArgs, config: ISDKConfig) => Promise<{
        error: string;
        result: string[];
    }>;
    relay: (payload: IPayload, config: ISDKConfig) => Promise<{
        error: string;
        result: any;
    }>;
    showPortis: (config: ISDKConfig) => Promise<void>;
}
export interface ISDKConfig {
    dappId: string;
    network: INetwork;
    version: string;
    defaultEmail?: string;
    scope?: Scope[];
    registerPageByDefault?: boolean;
}
export type Scope = 'email';
export interface IOptions {
    scope?: Scope[];
    gasRelay?: boolean;
    registerPageByDefault?: boolean;
}
export interface IPayload {
    id: number;
    jsonrpc: string;
    method: string;
    params: any[];
}

