{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISDKConfig, IConnectionMethods, IOptions } from './interfaces';\nimport Penpal, { AsyncMethodReturns } from 'penpal';\nimport { validateSecureOrigin } from './utils/secureOrigin';\nimport { styles } from './styles';\nimport { networkAdapter } from './networks';\n\nconst version = '$$PORTIS_SDK_VERSION$$';\nconst widgetUrl = 'https://widget-eos.portis.io';\n\nexport default class Portis {\n  config: ISDKConfig;\n  widget: Promise<{\n    communication: AsyncMethodReturns<IConnectionMethods>;\n    iframe: HTMLIFrameElement;\n    widgetFrame: HTMLDivElement;\n  }>;\n  private _widgetUrl = widgetUrl;\n  private _onLoginCallback: (\n    walletAddress: string,\n    email?: string,\n    reputation?: string,\n    accountName?: string,\n    accountPermission?: string,\n  ) => void;\n\n  constructor(dappId: string, network: string, options: IOptions = {}) {\n    validateSecureOrigin();\n    this._valiadateParams(dappId, network, options);\n    this.config = {\n      dappId,\n      network: networkAdapter(network),\n      version,\n      scope: options.scope,\n      registerPageByDefault: options.registerPageByDefault,\n    };\n    this.widget = this._initWidget();\n  }\n\n  async showPortis() {\n    const widgetCommunication = (await this.widget).communication;\n    return widgetCommunication.showPortis(this.config);\n  }\n\n  async getAccounts() {\n    const widgetCommunication = (await this.widget).communication;\n    return widgetCommunication.getAccounts(this.config);\n  }\n\n  onLogin(\n    callback: (\n      walletAddress: string,\n      email?: string,\n      reputation?: string,\n      accountName?: string,\n      accountPermission?: string,\n    ) => void,\n  ) {\n    this._onLoginCallback = callback;\n  }\n\n  private _valiadateParams(dappId: string, network: string, options: IOptions) {\n    if (!dappId) {\n      throw new Error(\"[Portis] 'dappId' is required. Get your dappId here: https://dashboard.portis.io\");\n    }\n\n    if (!network) {\n      throw new Error(\n        \"[Portis] 'network' is required. Read more about it here: https://docs.portis.io/#/configuration?id=network\",\n      );\n    }\n\n    if (options.registerPageByDefault !== undefined && typeof options.registerPageByDefault !== 'boolean') {\n      throw new Error(\n        \"[Portis] invalid 'registerPageByDefault' parameter, must be a boolean. Read more about it here: https://docs.portis.io/#/configuration?id=registerPageByDefault\",\n      );\n    }\n  }\n\n  private _initWidget(): Promise<{\n    communication: AsyncMethodReturns<IConnectionMethods>;\n    iframe: HTMLIFrameElement;\n    widgetFrame: HTMLDivElement;\n  }> {\n    return new Promise((resolve, reject) => {\n      const onload = async () => {\n        const style = document.createElement('style');\n        style.innerHTML = styles;\n\n        const container = document.createElement('div');\n        container.className = 'por_portis-container';\n\n        const widgetFrame = document.createElement('div');\n        widgetFrame.id = `portis-container-${Date.now()}`;\n        widgetFrame.className = 'por_portis-widget-frame';\n\n        container.appendChild(widgetFrame);\n        document.body.appendChild(container);\n        document.head.appendChild(style);\n\n        const connection = Penpal.connectToChild<IConnectionMethods>({\n          url: this._widgetUrl,\n          appendTo: document.getElementById(widgetFrame.id)!,\n          methods: {\n            setHeight: this._setHeight.bind(this),\n            getWindowSize: this._getWindowSize.bind(this),\n            onLogin: this._onLogin.bind(this),\n          },\n        });\n\n        connection.iframe.style.position = 'absolute';\n        connection.iframe.style.height = '100%';\n        connection.iframe.style.width = '100%';\n        connection.iframe.style.border = '0 transparent';\n\n        const communication = await connection.promise;\n        resolve({ communication, iframe: connection.iframe, widgetFrame });\n      };\n\n      if (['loaded', 'interactive', 'complete'].indexOf(document.readyState) > -1) {\n        onload();\n      } else {\n        window.addEventListener('load', onload.bind(this), false);\n      }\n    });\n  }\n\n  private async _setHeight(height: number) {\n    const widgetFrame = (await this.widget).widgetFrame;\n    widgetFrame.style.height = `${height}px`;\n  }\n\n  private _getWindowSize() {\n    const body = document.getElementsByTagName('body')[0];\n    const width = window.innerWidth || document.documentElement.clientWidth || body.clientWidth;\n    const height = window.innerHeight || document.documentElement.clientHeight || body.clientHeight;\n    return { width, height };\n  }\n\n  private _onLogin(\n    walletAddress: string,\n    email?: string,\n    reputation?: string,\n    accountName?: string,\n    accountPermission?: string,\n  ) {\n    if (this._onLoginCallback) {\n      this._onLoginCallback(walletAddress, email, reputation, accountName, accountPermission);\n    }\n  }\n}\n"]}